import { StatusCodes } from 'http-status-codes'
import { JwtProvider } from '~/providers/JwtProvider'
import { env } from '~/config/environment'
import ApiError from '~/utils/ApiError'

// Middleware n√†y s·∫Ω ƒë·∫£m nhi·ªám vi·ªác quan tr·ªçng: X√°c th·ª±c JWT accessToken nh·∫≠n ƒë∆∞·ª£c t·ª´ ph√≠a FE c√≥ h·ª£p l·ªá hay kh√¥ng
const isAuthorized = async (req, res, next) => {
  //L·∫•y accessToken client g·ª≠i l√™n ( ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông k√®m theo request nh·ªù withCredientials)
  const clientAccessToken = req?.cookies?.accessToken
  if (!clientAccessToken) {
    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized! (Token not found)'))
    return
  }
  try {
    //Th·ª±c hi·ªán gi·∫£i m√£ verify token xem c√≥ h·ª£p l·ªá kh√¥ng
    const accessTokenDecoded = await JwtProvider.verifyToken(clientAccessToken, env.ACCESS_TOKEN_SECRET_SIGNATURE)
    // console.log('accessTokenDecoded: ', accessTokenDecoded) //Tr·∫£ ra payload c·ªßa token (n·ªôi dung g√°n v√†o token)

    //L∆∞u th√¥ng tin ƒë∆∞·ª£c gi·∫£i m√£ v√†o req ƒë·ªÉ truy·ªÅn cho c√°c t·∫ßng sau ti·∫øp t·ª•c d√πng
    req.jwtDecoded = accessTokenDecoded

    //ƒê·∫©y ti·∫øp sang t·∫ßng ti·∫øp theo
    next()

  } catch (error) {
    console.log("üöÄ ~ isAuthorized ~ error:", error)
    //N·∫øu accessToken h·∫øt h·∫°n -> tr·∫£ v·ªÅ m√£ GONE (410) cho FE g·ªçi api refreshToken
    if (error?.message?.includes('jwt expired')) {
      next(new ApiError(StatusCodes.GONE, 'Need to refresh token'))
      return
    }
    //N·∫øu accessToken kh√¥ng h·ª£p l·ªá v√¨ c√°c l√Ω do kh√°c --> tr·∫£ v·ªÅ l·ªói lu√¥n
    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized!'))
    return
  }
}

export const authMiddleware = { isAuthorized }