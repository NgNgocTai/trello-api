import ApiError from '~/utils/ApiError'
import { userModel } from '~/models/userModel'
import { boardModel } from '~/models/boardModel'
import { invitationModel } from '~/models/invitationModel'
import { INVITATION_TYPES, BOARD_INVITATION_STATUS } from '~/utils/constants'
import { pickUser } from '~/utils/formatters'
import { StatusCodes } from 'http-status-codes'


const createNewBoardInvitation = async (reqBody, inviterId) => {
  try {
    // Ng∆∞·ªùi m·ªùi ch√≠nh l√† ng∆∞·ªùi ƒëang request, n√™n ch√∫ng ta t√¨m theo id l·∫•y t·ª´ token
    const inviter = await userModel.findOneById(inviterId)
    // Ng∆∞·ªùi ƒë∆∞·ª£c m·ªùi: L·∫•y theo email nh·∫≠n t·ª´ ph√≠a FE
    const invitee = await userModel.findOneByEmail(reqBody.inviteeEmail)
    // T√¨m lu√¥n c√°i board ra ƒë·ªÉ l·∫•y data x·ª≠ l√Ω
    const board = await boardModel.findOneById(reqBody.boardId)

    // N·∫øu kh√¥ng t·ªìn t·∫°i 1 trong 3 th√¨ c·ª© th·∫≥ng tay reject
    if (!inviter || !invitee || !board) {
      throw new ApiError(StatusCodes.NOT_FOUND, 'Inviter, Invitee or Board not found!')
    }

    // T·∫°o data c·∫ßn thi·∫øt ƒë·ªÉ l∆∞u v√†o trong DB
    // C√≥ th·ªÉ th·ª≠ b·ªè ho·∫∑c l√†m sai l·ªách type, boardInvitation, status ƒë·ªÉ test xem Model validate ok ch∆∞a.
    const newInvitationData = {
      inviterId,
      inviteeId: invitee._id.toString(), // chuy·ªÉn t·ª´ ObjectId v·ªÅ String v√¨ sang b√™n Model c√≥ check l·∫°i data ·ªü h√†m create
      type: INVITATION_TYPES.BOARD_INVITATION,
      boardInvitation: {
        boardId: board._id.toString(),
        status: BOARD_INVITATION_STATUS.PENDING
      }
    }

    // G·ªçi sang Model ƒë·ªÉ l∆∞u v√†o DB
    const createdInvitation = await invitationModel.createNewBoardInvitation(newInvitationData)
    const getInvitation = await invitationModel.findOneById(createdInvitation.insertedId.toString())

    // Ngo√†i th√¥ng tin c·ªßa c√°i board invitation m·ªõi t·∫°o th√¨ tr·∫£ v·ªÅ ƒë·ªß c·∫£ lu·ªìng board, inviter, invitee cho FE tho·∫£i m√°i x·ª≠ l√Ω.
    const resInvitation = {
      ...getInvitation,
      inviter: pickUser(inviter),
      invitee: pickUser(invitee),
      board
    }

    return resInvitation
  } catch (error) { throw error }
}

const getInvitations = async (userId) => {
  try {
    const getInvitations = await invitationModel.findByUser(userId)
    // console.log("üöÄ ~ getInvitations ~ getInvitations:", getInvitations)

    //Do d·ªØ li·ªáu invier, invitee, board ƒëang l√† m·∫£ng 1 ph·∫ßn t·ª≠ --> chuy·ªÉn v·ªÅ json object tr·∫£ cho FE
    const resInvitations = getInvitations.map(i => {
      return {
        ...i,
        inviter: i.inviter[0] || {},
        invitee: i.invitee[0] || {},
        board: i.board[0] || {}
      }
    })

    return resInvitations
  } catch(error) {throw error}
}

// Service: C·∫≠p nh·∫≠t l·ªùi m·ªùi tham gia Board
const updateBoardInvitation = async (userId, invitationId, status) => {
  try {
    // 1. T√¨m b·∫£n ghi invitation trong DB
    const getInvitation = await invitationModel.findOneById(invitationId)
    if (!getInvitation) {
      throw new ApiError(StatusCodes.NOT_FOUND, 'Invitation not found!')
    }

    // 2. Sau khi c√≥ Invitation r·ªìi th√¨ l·∫•y full th√¥ng tin c·ªßa Board
    const boardId = getInvitation.boardInvitation.boardId
    const getBoard = await boardModel.findOneById(boardId)
    if (!getBoard) {
      throw new ApiError(StatusCodes.NOT_FOUND, 'Board not found!')
    }

    // 3.Ki·ªÉm tra n·∫øu status = ACCEPTED m√† user ƒë√£ l√† owner ho·∫∑c member c·ªßa board r·ªìith√¨ tr·∫£ v·ªÅ th√¥ng b√°o l·ªói lu√¥n.
    // Note: memberIds v√† ownerIds trong board l√† ObjectId => c·∫ßn convert v·ªÅ String ƒë·ªÉ check.
    const boardOwnerAndMemberIds = [...getBoard.ownerIds, ...getBoard.memberIds].toString()
    if (status === BOARD_INVITATION_STATUS.ACCEPTED && boardOwnerAndMemberIds.includes(userId)) {
      throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'You are already a member of this board')
    }

    //T·∫°o d·ªØ li·ªáu ƒë·ªÉ update b·∫£n ghi invitation
    const updateData = {
      boardInvitation: {
        ...getInvitation.boardInvitation,
        status: status // ACCEPTED ho·∫∑c REJECTED do FE ƒë·∫©y l√™n
      }
    }
    //C·∫≠p nh·∫≠t l·∫°i v√†o db
    const updatedInvitation = await invitationModel.update(invitationId, updateData)

    //N·∫øu tr∆∞·ªùng h·ª£p l√† ACCEPTED, th√™m th√¥ng tin ng∆∞·ªùi d√πng v√†o memberIds c·ªßa boards
    if (updatedInvitation.boardInvitation.status === BOARD_INVITATION_STATUS.ACCEPTED) {
      await boardModel.pushMembersIds(boardId, userId)
    }

    return updatedInvitation

  } catch (error) {
    throw error
  }
}


export const invitationService = {
  createNewBoardInvitation,
  getInvitations,
  updateBoardInvitation
}