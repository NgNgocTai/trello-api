
import { userModel } from '~/models/userModel'
import { StatusCodes } from 'http-status-codes'
import ApiError from '~/utils/ApiError'
import bcryptjs from 'bcryptjs'
import { v4 as uuidv4 } from 'uuid'
import { pickUser } from '~/utils/formatters'
import { WEBSITE_DOMAIN } from '~/utils/constants'
import { ResendProvider } from '~/providers/ResendProvider'

const createNew = async (reqBody) => {
  try {
    // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i hay ch∆∞a
    const existedUser = await userModel.findOneByEmail(reqBody.email)
    if (existedUser) {
      throw new ApiError(StatusCodes.CONFLICT, 'Email already exists.')
    }

    //T·∫°o data ƒë·ªÉ l∆∞u v√†o database
    //nameFromEmail s·∫Ω l√† t√™n ng∆∞·ªùi d√πng ƒë∆∞·ª£c t·∫°o t·ª´ email
    const nameFromEmail = reqBody.email.split('@')[0]
    const newUserData = {
      email:reqBody.email,
      password:bcryptjs.hashSync(reqBody.password, 8), // M√£ h√≥a m·∫≠t kh·∫©u
      username:nameFromEmail,
      displayName:nameFromEmail,
      verifyToken: uuidv4()// T·∫°o token x√°c th·ª±c duy nh·∫•t
    }

    //L∆∞u user v√†o database
    const createdUser = await userModel.createNew(newUserData)
    const getNewUser = await userModel.findOneById(createdUser.insertedId)

    //G·ª≠i email cho ng∆∞·ªùi d√πng x√°c th·ª±c
    const verificationLink = `${WEBSITE_DOMAIN}/account/verification?email=${getNewUser.email}&token=${getNewUser.verifyToken}`

    const to = getNewUser.email
    const subject = 'Trello MERN Stack Advanced: Please verify your email before using our services!'

    const html = `
        <h3>Here is your verification link:</h3>
        <h3>${verificationLink}</h3>
        <h3>Sincerely,<br/>‚Äì Ngoctaidev ‚Äì M·ªôt L·∫≠p Tr√¨nh Vi√™n ‚Äì</h3>
    `
    const emailResponse = await ResendProvider.sendEmail({ to, subject, html })
    console.log("üöÄ ~ createNew ~ emailResponse:", emailResponse)
    // return k·∫øt qu·∫£ cho Controller
    return pickUser(getNewUser)

  } catch (error) {throw (error)}
}

export const userService = {
  createNew
}