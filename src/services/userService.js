
import { userModel } from '~/models/userModel'
import { StatusCodes } from 'http-status-codes'
import ApiError from '~/utils/ApiError'
import bcryptjs from 'bcryptjs'
import { v4 as uuidv4 } from 'uuid'
import { pickUser } from '~/utils/formatters'
import { WEBSITE_DOMAIN } from '~/utils/constants'
import { ResendProvider } from '~/providers/ResendProvider'
import { JwtProvider } from '~/providers/JwtProvider'
import { env } from '~/config/environment'
import { CloudinaryProvider } from '~/providers/CloudinaryProvider'

const createNew = async (reqBody) => {
  try {
    // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i hay ch∆∞a
    const existedUser = await userModel.findOneByEmail(reqBody.email)
    if (existedUser) {
      throw new ApiError(StatusCodes.CONFLICT, 'Email already exists.')
    }

    //T·∫°o data ƒë·ªÉ l∆∞u v√†o database
    //nameFromEmail s·∫Ω l√† t√™n ng∆∞·ªùi d√πng ƒë∆∞·ª£c t·∫°o t·ª´ email
    const nameFromEmail = reqBody.email.split('@')[0]
    const newUserData = {
      email:reqBody.email,
      password:bcryptjs.hashSync(reqBody.password, 8), // M√£ h√≥a m·∫≠t kh·∫©u
      username:nameFromEmail,
      displayName:nameFromEmail,
      verifyToken: uuidv4()// T·∫°o token x√°c th·ª±c duy nh·∫•t
    }

    //L∆∞u user v√†o database
    const createdUser = await userModel.createNew(newUserData)
    const getNewUser = await userModel.findOneById(createdUser.insertedId)

    //G·ª≠i email cho ng∆∞·ªùi d√πng x√°c th·ª±c
    const verificationLink = `${WEBSITE_DOMAIN}/account/verification?email=${getNewUser.email}&token=${getNewUser.verifyToken}`

    const to = getNewUser.email
    const subject = 'Trello MERN Stack Advanced: Please verify your email before using our services!'

    const html = `
        <h3>Here is your verification link:</h3>
        <h3>${verificationLink}</h3>
        <h3>Sincerely,<br/>‚Äì Ngoctaidev ‚Äì M·ªôt L·∫≠p Tr√¨nh Vi√™n ‚Äì</h3>
    `
    const emailResponse = await ResendProvider.sendEmail({ to, subject, html })
    console.log('üöÄ ~ createNew ~ emailResponse:', emailResponse)
    // return k·∫øt qu·∫£ cho Controller
    return pickUser(getNewUser)

  } catch (error) {throw (error)}
}

const verifyAccount = async (reqBody) => {
  try {
    //Ktra xem co user trong db chua
    const existUser = await userModel.findOneByEmail(reqBody.email)
    //C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
    if (!existUser)
      throw new ApiError(StatusCodes.NOT_FOUND, 'Account not found')
    if (existUser.isActive)
      throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your account is already activated')
    if (reqBody.token!== existUser.verifyToken) 
      throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Token is invalid')

    // C·∫≠p nh·∫≠t th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ verify account
    const updateData = {
      isActive:true,
      verifyToken:null
    }
    //Th·ª±c hi·ªán update th√¥ng tin cho user
    const updatedUser = await userModel.update(existUser._id, updateData)

    return pickUser(updatedUser)
  } catch (error) {throw error}
}

const login = async (reqBody) => {
  // Authentication (X√°c th·ª±c)
  try {
    //Ktra xem co user trong db chua
    const existUser = await userModel.findOneByEmail(reqBody.email)
    //C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
    if (!existUser) throw new ApiError(StatusCodes.NOT_FOUND, 'Account not found')
    if (!existUser.isActive)
      throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your account is not activated yet, please verify your account')
    if (!bcryptjs.compareSync(reqBody.password, existUser.password)) {
      throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your email or password is incorrect')
    }

    /*N·∫øu m·ªçi th·ª© ok th√¨ b·∫Øt ƒë·∫ßu t·∫°o Tokens ƒëƒÉng nh·∫≠p ƒë·ªÉ tr·∫£ v·ªÅ cho ph√≠a FE - Authorization (ph√¢n quy·ªÅn)*/
    // T·∫°o th√¥ng tin ƒë·ªÉ ƒë√≠nh k√®m trong JWT Token bao g·ªìm _id v√† email c·ªßa user
    const userInfo = {
      _id:existUser._id,
      email:existUser.email
    }

    // T·∫°o ra 2 lo·∫°i token, accessToken v√† refreshToken ƒë·ªÉ tr·∫£ v·ªÅ cho ph√≠a FE
    const accessToken = await JwtProvider.generateToken(userInfo, env.ACCESS_TOKEN_SECRET_SIGNATURE, env.ACCESS_TOKEN_LIFE)

    const refreshToken = await JwtProvider.generateToken(userInfo, env.REFRESH_TOKEN_SECRET_SIGNATURE, env.REFRESH_TOKEN_LIFE)

    // Tr·∫£ v·ªÅ th√¥ng tin c·ªßa user k√®m theo 2 c√°i token v·ª´a t·∫°o ra
    return { accessToken, refreshToken, ...pickUser(existUser) }
  } catch (error) {
    throw error
  }
}

const refreshToken = async (clientRefreshToken) => {
  try {
    // Verify, gi·∫£i m√£ c√°i refresh token xem c√≥ h·ª£p l·ªá kh√¥ng
    const refreshTokenDecoded = await JwtProvider.verifyToken(clientRefreshToken, env.REFRESH_TOKEN_SECRET_SIGNATURE)

    // Lay thong tin nguoi dung tu refreshToken, ko can query vo db
    const userInfo = {
      _id: refreshTokenDecoded._id,
      email: refreshTokenDecoded.email
    }

    // T·∫°o AccessToken m·ªõi t·ª´ th√¥ng tin l·∫•y ƒë∆∞·ª£c ra
    const accessToken = await JwtProvider.generateToken(
      userInfo,
      env.ACCESS_TOKEN_SECRET_SIGNATURE,
      env.ACCESS_TOKEN_LIFE // 1 ti·∫øng
    )

    return { accessToken }
  } catch (error) {
    throw error
  }
}

const update = async (userId, reqBody, userAvatarFile) => {
  try {
    // ki·ªÉm tra th√™m cho ch·∫Øc
    const existUser = await userModel.findOneById(userId)
    //C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
    if (!existUser) throw new ApiError(StatusCodes.NOT_FOUND, 'Account not found')
    if (!existUser.isActive)
      throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your account is not activated yet, please verify your account')

    //Kh·ªüi t·∫°o k·∫øt qu·∫£ updated user
    let updatedUser = {}

    //Tr∆∞·ªùng h·ª£p ƒë·ªïi m·∫≠t kh·∫©u
    if (reqBody.current_password && reqBody.new_password) {
      //Ki·ªÉm tra m·∫≠t kh·∫©u ng∆∞·ªùi d√πng nh·∫≠p v√†o c√≥ ƒë√∫ng kh√¥ng
      if (!bcryptjs.compareSync(reqBody.current_password, existUser.password)) {
        throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your email or password is incorrect')
      }
      //N·∫øu nh∆∞ ƒë√∫ng th√¨ hash new_password r·ªìi l∆∞u v√†o database
      updatedUser = await userModel.update(existUser._id, {
        password: bcryptjs.hashSync(reqBody.new_password, 8)
      })
    } else if (userAvatarFile) {
      //Tr∆∞·ªùng h·ª£p upload file l√™n cloudinary\
      const uploadResult = await CloudinaryProvider.streamUpload(userAvatarFile.buffer, 'users')
      console.log('üöÄ ~ update ~ uploadResult:', uploadResult)

      //L∆∞u l·∫°i url c·ªßa c√°i file ·∫£nh v√†o trong db
      updatedUser = await userModel.update(existUser._id, {
        avatar: uploadResult.secure_url
      })
    } else {
      updatedUser = await userModel.update(existUser._id, reqBody)
    }
    return pickUser(updatedUser)
  } catch (error) {
    throw error
  }
}

export const userService = {
  createNew,
  verifyAccount,
  login,
  refreshToken,
  update
}